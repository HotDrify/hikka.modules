# ---------------------------------------------------------------------------------
# üîí Licensed under the GNU AGPLv3.
# üö¨ Owner of heta.hikariatama.ru doesn't take any responsibilities or intellectual property rights regarding this script
# ---------------------------------------------------------------------------------
# Name: autoCorrect
# Author: HotDrify
# ---------------------------------------------------------------------------------
#          ‚ñà‚ñë‚ñà‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñÄ‚ñà‚ñÄ‚ÄÉ‚ñà‚ñÄ‚ñÑ‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñÄ‚ÄÉ‚ñà‚ñÑ‚ñà‚ÄÉ‚ñë‚ÄÉ‚ñà‚ñë‚ñà‚ÄÉ‚ñà‚ÄÉ‚ñà‚ñÑ‚ñÄ‚ÄÉ‚ñà‚ñÑ‚ñÄ‚ÄÉ‚ñÑ‚ñÄ‚ñà
#          ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÑ‚ñà‚ÄÉ‚ñë‚ñà‚ñë‚ÄÉ‚ñà‚ñÑ‚ñÄ‚ÄÉ‚ñà‚ñÄ‚ñÑ‚ÄÉ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñë‚ÄÉ‚ñë‚ñà‚ñë‚ÄÉ‚ñÑ‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ÄÉ‚ñà‚ñë‚ñà‚ÄÉ‚ñà‚ñë‚ñà‚ÄÉ‚ñà‚ñÄ‚ñà
#                      üîí Licensed under the GNU AGPLv3.
#                                 @HotDrify
from .. import loader, utils
import logging

import requests
import json

logger = logging.getLogger(__name__)

@loader.tds
class autoCorrectMod(loader.Module):
    """‚ù§Ô∏è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞."""
    
    strings = {
      "name": "autoCorrect",
      "status": "üìå –≤–∫–ª—é—á–µ–Ω–∏–µ –∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–∑–∞–º–µ–Ω—ã.",
      "lang": "üìå —è–∑—ã–∫",
      "link": "üìå –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω: –Ω–µ –¥–∞—Å—Ç –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π.",
      "slash": "üìå –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω: –Ω–µ –¥–∞—Å—Ç –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–ª–µ—à –∫–æ–º–∞–Ω–¥–æ–π (/).",
      "api_base": "üõ†Ô∏è (—ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è, –Ω–µ –∑–Ω–∞–µ—à—å, –Ω–µ —Ç—Ä–æ–≥–∞–π!) –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å API_BASE.",
      "ping": "üìå –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω: –Ω–µ –¥–∞—Å—Ç –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º (@)"
    }
    
    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
              "is_ping",
              True,
              lambda: self.strings["ping"],
            ),
            loader.ConfigValue(
              "api_base",
              'https://speller.yandex.net/services/spellservice.json/checkText',
              lambda: self.strings["api_base"],
              validator = loader.validators.Link(),
            ),
            loader.ConfigValue(
              "is_slash",
              True,
              lambda: self.strings["slash"],
              validator = loader.validators.Boolean(),
            ),
            loader.ConfigValue(
              "is_link",
              True,
              lambda: self.strings["link"],
              validator = loader.validators.Boolean(),
            ),
            loader.ConfigValue(
              "lang",
              "ru",
              lambda: self.strings["lang"],
              validator = loader.validators.Choice(["ru", "en"]),
          ),
          loader.ConfigValue(
              "status_work",
              True,
              lambda: self.strings["status"],
              validator = loader.validators.Boolean(),
          ),
        )

    @loader.tag("only_messages", "no_commands", "out")
    async def watcher(self, message):
        if not self.config["status_work"]:
            return
        
        if self.config["is_ping"]:
            if "@" in message.text:
                return
        
        if self.config["is_slash"]:
            if "/" in message.text:
                return
        
        if self.config["is_link"]:
            if "https" in message.text or "http" in message.text:
                return
                
        response = requests.get(
          self.config["api_base"],
          params = {
            'text': message.text,
            'lang': self.config['lang'],
            'options': 512
          }
        )
        
        data = response.json()
        ctext = message.text
        
        for mistake in data:
            ctext = ctext[:mistake['pos']] + mistake['s'][0] + ctext[mistake['pos']+mistake['len']:]
        
        if message.text != ctext:
            await message.edit(ctext)